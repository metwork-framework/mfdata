[general]
name=ungzip
version={{MFMODULE_VERSION}}
summary=plugin which ungzip incoming files and reinject them into the switch plugin
license=BSD
url=http://metwork
maintainer=Fabien MARTY <fabien.marty@gmail.com>
vendor=MetWork

[step_main]
# You can have several blocks [step_xxxx] if your plugin
# contains several steps.
# If you have only one step in your plugin, please use "main" as your
# step name in [step_xxxxx]. So just one [step_name] section in this case.

# You can use following placeholders:
# - {{ENV_VAR}}: replaced by the
#     corresponding env var.
# - {{MFDATA_CURRENT_PLUGIN_NAME}}: replaced by the plugin name
# - {{MFDATA_CURRENT_STEP_NAME}}: replaced by the step name
# - {{MFDATA_CURRENT_PLUGIN_DIR}}: replaced by the plugin
#     directory fullpath.
# - {{MFDATA_CURRENT_CONFIG_INI_PATH}}: replaced by this
#     file fullpath.
# - {{MFDATA_CURRENT_STEP_QUEUE}}: replaced by the name of
#     the queue for the plugin/step on redis
# - {{MFDATA_CURRENT_STEP_DIR}}: replaced by the step

# Command (without args) which implements the step daemon
# Note: it's not the command called for each incoming file, it's a daemon
#       implemented with Acquisition framework in Python ; if you want to
#       execute a binary command for each incoming file, please bootstrap
#       a "fork" plugin
cmd = {{MFDATA_CURRENT_PLUGIN_DIR}}/main.py

# Arguments for the cmd
# (if you use the standard Acquisition framework, you can alse set some options
#  with the following arg_{key} keys)
args = --config-file={{MFDATA_CURRENT_CONFIG_INI_PATH}} {{MFDATA_CURRENT_STEP_QUEUE}}

# Extra arguments on the arg_{key} template, will be used as default value
# for CLI parsing if you use the standard Acquisition framework.
# So, it's just a cleaner way to set some args but you can also set them on
# "args" key).
arg_redis-unix-socket-path = {{MFMODULE_RUNTIME_HOME}}/var/redis.socket

# FIXME
# Directory in which decompressed files will be reinjected.
# By default, decompressed files are reinjected in the switch. Therefore, make
# sure you have a plugin actually using the decompressed files, otherwise, they
# will be moved to the trash.
arg_dest-dir = {{MFDATA_DATA_IN_DIR}}/step.switch.main

# FIXME: configurable
numprocesses = 1
graceful_timeout = 30

switch_logical_condition = ( x['latest.switch.main.system_magic'].startswith(b'gzip compressed data') )
switch_use_hardlink = True
