[general]
_version={{MFMODULE_VERSION}}
_summary=plugin to send files to other machines/systems with HTTP GET/POST calls
_license=BSD
_url=https://metwork-framework.org
_maintainer=team@metwork-framework.org
_vendor=MetWork

[step_main]
_cmd_and_args={{MFDATA_CURRENT_PLUGIN_DIR}}/main.py --redis-unix-socket-path={{MFMODULE_RUNTIME_HOME}}/var/redis.socket {{MFDATA_CURRENT_STEP_QUEUE}}

# Failure policy : keep (default), delete or move
failure_policy = keep

# Destination directory when failure_policy is move (mandatory in this case)
# (if failure_policy != move, this configuration key is not used)
failure_policy_move_dest_dir =

# Keep tags in an additional file when failure_policy is move (default yes = 1)
# If you want to keep tags as file properties (for example for a reinject step)
# you have to put 0 here.
failure_policy_move_keep_tags = 1

# Suffix to add to the filename to keep tags when failure_policy_move_keep_tags
#    is True (default ".tags")
failure_policy_move_keep_tags_suffix = .tags

# If set then the process will be restarted sometime after max_age and
# max_age + random(0, max_age) seconds.
# 0 => disable this feature
max_age = 3600

# Split stdout/stderr logs into different files?
# AUTO => the global conf MFDATA_LOG_TRY_TO_SPLIT_STDOUT_STDERR is used (default: don't split)
# 1    => split
# 0    => don't split
log_split_stdout_stderr=AUTO

# Split logs of multiple workers into different log files?
# AUTO => the global conf MFDATA_LOG_TRY_TO_SPLIT_MULTIPLE_WORKERS is used (default: don't split)
# 1    => split
# 0    => don't split
log_split_multiple_workers=AUTO

# The number of processes to run for this step
# note: you can use {{MFCOM_HARDWARE_NUMBER_OF_CPU_CORES_MULTIPLIED_BY_2}}  value
# to avoid a kind of hardware automatic value (see "env |grep HARDWARE" as mfdata
# to find other automatic values)
numprocesses = 1

# if you set debug=1, numprocesses will be forced to 1
# and we will try to set all debug options and features
# (max_age will also be forced to 0 and mflog minimal level will be set to
#  DEBUG)
# DON'T USE IT ON PRODUCTION!!!
debug=0

# The number of seconds to wait for a step to terminate gracefully
# before killing it. When stopping a process, we first send it a TERM signal.
# A step may catch this signal to perform clean up operations before exiting.
# If the worker is still active after {timeout} seconds, we send it a
# KILL signal. It is not possible to catch a KILL signal so the worker will stop.
# If you use the standard Acquisition framework to implement your step, the
# TERM signal is handled like this: "we don't process files anymore but we
# try to end with the current processed file before stopping". So the
# timeout must by greater than the maximum processing time of one file.
# (must be set and >0)
timeout=600

# resource limit for each step process
# rlimit_as => maximum area (in bytes) of address space which may be taken by the process.
# rlimit_nofile => maximum number of open file descriptors for the current process.
# rlimit_stack => maximum size (in bytes) of the call stack for the current process.
#     This only affects the stack of the main thread in a multi-threaded process.
# rlimit_fsize =>  maximum size of a file which the process may create.
# (empty value means no limit)
rlimit_as = 1000000000
rlimit_nofile = 1000
rlimit_stack = 10000000
rlimit_fsize = 10000000000


[step_reinject]
_cmd_and_args=reinject_step.py --redis-unix-socket-path={{MFMODULE_RUNTIME_HOME}}/var/redis.socket --reinject=main {{MFDATA_CURRENT_STEP_QUEUE}}


[custom]

# HTTP method to use (PUT, POST, GET, OPTIONS, HEAD, PATCH or DELETE)
# for uploading files
http_method=POST

# HTTP full URL to use for uploading files
# You can use following placeholders in this url:
# - {ORIGINAL_BASENAME}
# - {ORIGINAL_DIRNAME}
# - {RANDOM_ID}
# - {STEP_COUNTER}
# - {ORIGINAL_UID}
# - strftime placeholders like %Y%m%d
# Example for feeding another mfdata with HTTP
# http://FIXME:9091/incoming/{ORIGINAL_BASENAME}
http_url=FIXME

# HTTP timeout (in seconds)
http_timeout=60

# HTTP status codes which are considered as an upload success
# (coma separated list)
http_ok_status_codes=200,201
