[common]

# Defines whether or not a directory should be scrutinized
# Presence: OPTIONAL (false by default)
#
active=false

# Forced scan interval of a directory in seconds. (0 = No forced scan)
# In order to "boot the pump" at the start of the process, the active directories are
# "listed" and the files actually present and complying with the filter criteria at
# this time are indicated in their respective redis queues.
# This forced listing operation is repeated every forced_poll seconds, in order to
# avoid as much as possible leaving "orphaned files" due to momentary failure of the
# redis server or unscrupulous consumer clients. It is therefore possible for clients
# to receive more than one notification of presence for the same file. It is their responsibility to deal with this eventuality.
# This value may be different for each directory.
# Presence: OPTIONAL ((0 = No forced scan) default)
#
forced_poll={{MFDATA_DIRECTORY_OBSERVER_FORCED_POLL}}

# Limitation forced scan (0 = No limitation)
# If the size of a redis queue is greater than this limit,
# the polling no longer inserts a notification of presence.
# Presence: OPTIONAL (10000 by default)
#
poll_queue_limit={{MFDATA_DIRECTORY_OBSERVER_POLL_QUEUE_LIMIT}}

##########################################################################
# WARNING: 1 single and same value per timeout for all the active queues #
##########################################################################
# The durations that have elapsed since the creation of the WatchMonitor
# and since the reception of the last event are regularly tested.
# If one of these 2 values exceeds the following constants, the WatchMonitor
# is stopped, and a new one is created, activated and takes its place.
# These timeouts were introduced following the discovery of blockages of
# the first version of directory_observer based on the GAMIN lib sometimes
# occurring after a week of smooth operation. (No more directory change notification)
# Value of application security timeout
#(Maximum inactivity time (no event reception) before considering the need
# to stop the application completely)
# Unlike the "monitor_event" timer, the "monitor_inactivity" timer is not
# reset in case of a "recreation" of the WatchMonitor
# Value in seconds (<= 0 -> no timeout)
# Presence: OPTIONAL (default 300 -> 5 minutes)
#
monitor_inactivitytimeout={{MFDATA_DIRECTORY_OBSERVER_MONITOR_INACTIVITYTIMEOUT}}


#################################################################
# WARNING: 1 single and same REDIS server for all active queues #
#################################################################

# Name or IP address of the REDIS server
# Presence: MANDATORY
#
redis_server=127.0.0.1

# REDIS server port number
# Presence: MANDATORY
#
redis_port={{MFDATA_REDIS_PORT}}

# REDIS unix socket
# if set to something != null, then overrides redis_server/redis_port
redis_unix_socket={{MFMODULE_RUNTIME_HOME}}/var/redis.socket

# Value of the REDIS security timeout in seconds to avoid interminable
# blockages during unavailability.
# Do not set too low a value -> if not REDIS events
# 0 = no timeout (not recommended)))
# Presence: OPTIONAL ( default 10 )
#
timeout=10

# Regular expressions (list separated by ';') specifying file name patterns
# to be ignored
# Note that regardless of the value set, the regular expression
# "^. * \ Working $" (all files that end in .working) will be added to the list
# of ignored files. In addition, any subdirectories are totally ignored.
# Presence: OPTIONAL (^.*\.working$ by default)
#
ignore={{MFDATA_DIRECTORY_OBSERVER_IGNORE}}

# Regular expressions (a list separated by ';') specifying filename patterns to take
# into account (ie if the name does not match one of its regular expressions,
# it will be ignored)
# Presence: OPTIONAL	(^.*$ by default)
#
only=^.*$

######################################################################################

{% for PLUGIN in PLUGINS %}
    {% for STEP in PLUGIN.configuration.steps %}
        {% for DIR in STEP.listened_directories.split(',') %}
[step_{{PLUGIN.name}}_{{STEP.name}}_{{loop.index}}]
active=true
directory={{DIR}}
queue=step.{{PLUGIN.name}}.{{STEP.name}}
        {% endfor %}
    {% endfor %}
{% endfor %}
