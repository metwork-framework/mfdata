###################################
#####                         #####
#####     GENERAL SECTION     #####
#####                         #####
###################################
# (plugin metadatas)
[general]

# Notes about the name of the plugin:
# - the name of the plugin is given by the content of .layerapi2_label
#   in this directory (format: plugin_{name of the plugin}@mfdata)
# - the old "name" key in this file is not used anymore

# Version of the plugin (X.Y.Z)
# If the value is {% raw %}{{MODULE_VERSION}}{% endraw %},
# the current module version is used
version={{cookiecutter.version}}

# Summary (one line) of the goal of the plugin
summary={{cookiecutter.one_line_summary}}

# License of the plugin
license={{cookiecutter.license}}

# URL of the plugin homepage
url={{cookiecutter.url}}

# Name of the maintainer of the plugin on the form "Firstname FAMILYNAME <email>"
maintainer={{cookiecutter.maintainer}}

# Vendor of the plugin
vendor={{cookiecutter.vendor}}


#################################
#####                       #####
#####     STEP SECTIONS     #####
#####                       #####
#################################
# (one section [step_xxxxx] for each step)
[step_main]
# You can have several blocks [step_xxxx] if your plugin
# contains several steps.
# If you have only one step in your plugin, please use "main" as your
# step name in [step_xxxxx]. So just one [step_name] section in this case.

# You can use following placeholders:
# - {% raw %}{{ENV_VAR}}{% endraw %}: replaced by the
#     corresponding env var.
# - {% raw %}{{MFDATA_CURRENT_PLUGIN_NAME}}{% endraw %}: replaced by the plugin name
# - {% raw %}{{MFDATA_CURRENT_STEP_NAME}}{% endraw %}: replaced by the step name
# - {% raw %}{{MFDATA_CURRENT_PLUGIN_DIR}}{% endraw %}: replaced by the plugin
#     directory fullpath.
# - {% raw %}{{MFDATA_CURRENT_CONFIG_INI_PATH}}{% endraw %}: replaced by this
#     file fullpath.
# - {% raw %}{{MFDATA_CURRENT_STEP_QUEUE}}{% endraw %}: replaced by the name of
#     the queue for the plugin/step on redis
# - {% raw %}{{MFDATA_CURRENT_STEP_DIR}}{% endraw %}: replaced by the step
#     directory

# Command (without args) which implements the step daemon
# Note: it's not the command called for each incoming file, it's a daemon
#       implemented with Acquisition framework in Python ; if you want to
#       execute a binary command for each incoming file, please bootstrap
#       a "fork" plugin
cmd = {% raw %}{{MFDATA_CURRENT_PLUGIN_DIR}}{% endraw %}/main.py

# Arguments for the cmd
# (if you use the standard Acquisition framework, you can alse set some options
#  with the following arg_{key} keys)
args = --config-file={% raw %}{{MFDATA_CURRENT_CONFIG_INI_PATH}}{% endraw %} {% raw %}{{MFDATA_CURRENT_STEP_QUEUE}}{% endraw %}

# Extra arguments on the arg_{key} template, will be used as default value
# for CLI parsing if you use the standard Acquisition framework.
# So, it's just a cleaner way to set some args but you can also set them on
# "args" key).
arg_redis-unix-socket-path = {% raw %}{{MODULE_RUNTIME_HOME}}{% endraw %}/var/redis.socket

##### Step extra configuration #####

# For data supply with switch plugin : True, False or logical expression
# on file tags
# Example : (x['first.core.original_dirname'] == b'transmet_fac')
switch_logical_condition = {{cookiecutter.switch_logical_condition}}

# If you do not change anything to the incoming file at the filesystem level
# (permissions, user/group, content), you can set this variable to True
# The switch plugin will send to your plugin a hardlink instead of a copy
# (which is better for performances).
# Note: you can add tags because it's not at the filesystem level.
switch_use_hardlink = False

# The number of processes to run for this step
numprocesses = 1

# The number of seconds to wait for a step to terminate gracefully
# before killing it. When stopping a process, we first send it a TERM signal.
# A step may catch this signal to perform clean up operations before exiting.
# If the worker is still active after graceful_timeout seconds, we send it a
# KILL signal. It is not possible to catch a KILL signal so the worker will stop.
# If you use the standard Acquisition framework to implement your step, the
# TERM signal is handled like this: "we don't process files anymore but we
# try to end with the current processed file before stopping". So the
# graceful_timeout must by greater than the maximum processing time of one file.
graceful_timeout = 600

# If set then the step will be restarted sometime after max_age seconds.
max_age = 310

# If max_age is set then the step will live between max_age and
# max_age + random(0, max_age_variance) seconds.
# This avoids restarting all processes for a step at once.
max_age_variance = 300

# resource limit for each step process
# rlimit_as => maximum area (in bytes) of address space which may be taken by the process.
# rlimit_nofile => maximum number of open file descriptors for the current process.
# rlimit_stack => maximum size (in bytes) of the call stack for the current process.
#     This only affects the stack of the main thread in a multi-threaded process.
# rlimit_core => maximum size (in bytes) of a core file that the current process can create.
# rlimit_fsize =>  maximum size of a file which the process may create.
# (empty value means no limit)
rlimit_as = 1000000000
rlimit_nofile = 1000
rlimit_stack = 10000000
rlimit_core = 10000000
rlimit_fsize = 100000000
