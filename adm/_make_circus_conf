#!/usr/bin/env python3

import os
import glob
import sys
import envtpl
from configparser_extended import ExtendedConfigParser
from acquisition.utils import _set_custom_environment

MFMODULE_HOME = os.environ["MFMODULE_HOME"]
MFMODULE_RUNTIME_HOME = os.environ["MFMODULE_RUNTIME_HOME"]
MFDATA_PLUGIN_HOME = os.path.join(os.environ["MFMODULE_RUNTIME_HOME"],
                                  "var", "plugins")
CONFIG = os.environ.get('MFCONFIG', 'GENERIC')


def make_watcher_conf(plugin_configuration_file):
    output = []
    parser = ExtendedConfigParser(config=CONFIG, strict=False,
                                  inheritance='im', interpolation=None)
    plugin_name = os.path.basename(os.path.dirname(plugin_configuration_file))
    plugin_dir = os.path.dirname(plugin_configuration_file)
    parser.read(plugin_configuration_file)
    steps = [x.replace("step_", "", 1).split(':')[0] for x in parser.sections()
             if x.startswith("step_")]
    extra_daemons = [x.replace("extra_daemon_", "", 1).split(':')[0]
                     for x in parser.sections()
                     if x.startswith("extra_daemon_")]

    redis_service = False
    if parser.has_option("general", "redis_service"):
        redis_service = parser.getboolean("general", "redis_service")

    for step in steps:
        _set_custom_environment(plugin_name, step)
        section = "step_%s" % step
        cmd = parser.get(section, "cmd")
        args = parser.get(section, "args")
        before_start = None
        numprocesses = 1
        graceful_timeout = 600
        max_age = 310
        max_age_variance = 300
        rlimit_as = None
        rlimit_nofile = None
        rlimit_stack = None
        rlimit_core = None
        rlimit_fsize = None
        if parser.has_option(section, "__before_start"):
            before_start = parser.get(section, "__before_start")
        if parser.has_option(section, "numprocesses"):
            numprocesses = parser.getint(section, "numprocesses")
        if parser.has_option(section, "max_age"):
            max_age = parser.getint(section, "max_age")
        if parser.has_option(section, "graceful_timeout"):
            graceful_timeout = parser.getint(section, "graceful_timeout")
        if parser.has_option(section, "max_age_variance"):
            max_age_variance = parser.getint(section, "max_age_variance")
        if parser.has_option(section, "rlimit_as"):
            rlimit_as = parser.getint(section, "rlimit_as")
        if parser.has_option(section, "rlimit_nofile"):
            rlimit_nofile = parser.getint(section, "rlimit_nofile")
        if parser.has_option(section, "rlimit_stack"):
            rlimit_stack = parser.getint(section, "rlimit_stack")
        if parser.has_option(section, "rlimit_core"):
            rlimit_core = parser.getint(section, "rlimit_core")
        if parser.has_option(section, "rlimit_fsize"):
            rlimit_fsize = parser.getint(section, "rlimit_fsize")
        if numprocesses > 1:
            std_prefix = \
                "{{MFMODULE_RUNTIME_HOME}}/log/step_%s_%s_worker$(circus.wid)" % \
                (plugin_name, step)

        else:
            std_prefix = "{{MFMODULE_RUNTIME_HOME}}/log/step_%s_%s" % \
                (plugin_name, step)
        stdout = std_prefix + ".stdout"
        stderr = std_prefix + ".stderr"
        output.append("")
        output.append("[watcher:step.%s.%s]" % (plugin_name, step))
        output.append("cmd = std_redirect")
        output.append("args = -o %s -e %s -- plugin_wrapper %s -- %s %s" %
                      (stdout, stderr, plugin_name,
                       envtpl.render_string(cmd, keep_multi_blank_lines=False),
                       envtpl.render_string(args, keep_multi_blank_lines=False)))
        output.append("numprocesses = %i" % numprocesses)
        output.append("graceful_timeout = %i" % graceful_timeout)
        output.append("max_age = %i" % max_age)
        output.append("max_age_variance = %i" % max_age_variance)
        output.append("copy_env = True")
        output.append("async_kill = True")
        output.append("max_retry = -1")
        output.append("autostart = True")
        output.append("respawn = True")
        working_dir = os.path.dirname(plugin_configuration_file)
        output.append("working_dir = %s" % working_dir)
        if rlimit_as:
            output.append("rlimit_as = %i" % rlimit_as)
        if rlimit_nofile:
            output.append("rlimit_nofile = %i" % rlimit_nofile)
        if rlimit_stack:
            output.append("rlimit_stack = %i" % rlimit_stack)
        if rlimit_core:
            output.append("rlimit_core = %i" % rlimit_core)
        if rlimit_fsize:
            output.append("rlimit_fsize = %i" % rlimit_fsize)
        output.append("stdout_stream.class = FileStream")
        output.append("stderr_stream.class = FileStream")
        output.append("stdout_stream.filename = "
                      "{{MFMODULE_RUNTIME_HOME}}/log/circus.log")
        output.append("stderr_stream.filename = "
                      "{{MFMODULE_RUNTIME_HOME}}/log/circus.log")
        if before_start:
            output.append("hooks.before_start = %s" % before_start)

    if redis_service:
        output.append("")
        output.append("[watcher:redis_service_for_plugin_%s]" % plugin_name)
        output.append("cmd = redis-server")
        output.append("args = {{MFMODULE_RUNTIME_HOME}}/tmp/config_auto/"
                      "redis_plugin_%s.conf" % plugin_name)
        output.append("numprocesses = 1")
        output.append("stdout_stream.class = FileStream")
        output.append("stdout_stream.filename = {{MFMODULE_RUNTIME_HOME}}/log/"
                      "redis_plugin_%s.log" % plugin_name)
        output.append("stderr.class = FileStream")
        output.append("stderr.filename = {{MFMODULE_RUNTIME_HOME}}/log/"
                      "redis_plugin_%s.log" % plugin_name)
        output.append("copy_env = True")
        output.append("autostart = True")
        output.append("max_retry = -1")
        output.append("respawn = True")
        with open("%s/tmp/config_auto/redis_plugin_%s.conf" %
                  (MFMODULE_RUNTIME_HOME, plugin_name), "w+") as f:
            with open("%s/config/redis_plugin_xxx.conf" % MFMODULE_HOME,
                      "r") as f2:
                content = f2.read()
            new_content = envtpl.render_string(content,
                                               {"PLUGIN_NAME": plugin_name},
                                               keep_multi_blank_lines=False)
            f.write(new_content)

    for extra_daemon in extra_daemons:
        section = "extra_daemon_%s" % extra_daemon
        cmd_and_args = parser.get(section, "cmd_and_args")
        numprocesses = parser.getint(section, "numprocesses")
        output.append("")
        output.append("[watcher:extra_daemon_%s_for_plugin_%s]" %
                      (extra_daemon, plugin_name))
        output.append("cmd = plugin_wrapper")
        output.append("args = %s -- %s" % (plugin_name, cmd_and_args))
        output.append("working_dir = %s" % plugin_dir)
        output.append("numprocesses = %i" % numprocesses)
        output.append("copy_env = True")
        output.append("async_kill = True")
        output.append("autostart = True")
        output.append("respawn = True")
        output.append("max_retry = -1")
        output.append("stdout_stream.class = FileStream")
        output.append("stdout_stream.filename = {{MFMODULE_RUNTIME_HOME}}/log/"
                      "extra_daemon_%s_plugin_%s.log" %
                      (extra_daemon, plugin_name))
        output.append("stderr.class = FileStream")
        output.append("stderr_stream.filename = {{MFMODULE_RUNTIME_HOME}}/log/"
                      "extra_daemon_%s_plugin_%s.log" %
                      (extra_daemon, plugin_name))
        rlimit_as = None
        rlimit_nofile = None
        rlimit_nproc = None
        rlimit_stack = None
        rlimit_core = None
        rlimit_fsize = None
        if parser.has_option(section, "rlimit_as"):
            rlimit_as = parser.getint(section, "rlimit_as")
        if parser.has_option(section, "rlimit_nofile"):
            rlimit_nofile = parser.getint(section, "rlimit_nofile")
        if parser.has_option(section, "rlimit_nproc"):
            rlimit_nproc = parser.getint(section, "rlimit_nproc")
        if parser.has_option(section, "rlimit_stack"):
            rlimit_stack = parser.getint(section, "rlimit_stack")
        if parser.has_option(section, "rlimit_core"):
            rlimit_core = parser.getint(section, "rlimit_core")
        if parser.has_option(section, "rlimit_fsize"):
            rlimit_fsize = parser.getint(section, "rlimit_fsize")
        if rlimit_as:
            output.append("rlimit_as = %i" % rlimit_as)
        if rlimit_nofile:
            output.append("rlimit_nofile = %i" % rlimit_nofile)
        if rlimit_nproc:
            output.append("rlimit_nproc = %i" % rlimit_nproc)
        if rlimit_stack:
            output.append("rlimit_stack = %i" % rlimit_stack)
        if rlimit_core:
            output.append("rlimit_core = %i" % rlimit_core)
        if rlimit_fsize:
            output.append("rlimit_fsize = %i" % rlimit_fsize)
    return envtpl.render_string("\n".join(output),
                                keep_multi_blank_lines=False)


circus_ini_file = os.path.join(os.environ['MFMODULE_HOME'], 'config',
                               'circus.ini')
with open(circus_ini_file, "r") as f:
    content = envtpl.render_string(f.read(), keep_multi_blank_lines=False)

plugins = []
if len(sys.argv) == 2:
    config_files = glob.glob(sys.argv[1] + "/config.ini")
else:
    config_files = glob.glob(MFDATA_PLUGIN_HOME + "/*/config.ini")
for config_file in config_files:
    content = content + make_watcher_conf(config_file)

print(content)
