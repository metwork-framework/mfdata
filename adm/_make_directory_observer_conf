#!/usr/bin/env python3

import os
import glob
import envtpl
from configparser_extended import ExtendedConfigParser
from acquisition.utils import _set_custom_environment

MFDATA_PLUGIN_HOME = os.path.join(os.environ["MFMODULE_RUNTIME_HOME"],
                                  "var", "plugins")
CONFIG = os.environ.get('MFCONFIG', 'GENERIC')


def make_directory_observer_conf(plugin_configuration_file):
    output = []
    parser = ExtendedConfigParser(config=CONFIG, strict=False,
                                  inheritance='im', interpolation=None)
    plugin_name = os.path.basename(os.path.dirname(plugin_configuration_file))
    parser.read(plugin_configuration_file)
    steps = [x.replace("step_", "", 1).split(':')[0] for x in parser.sections()
             if x.startswith("step_")]
    for step in steps:
        _set_custom_environment(plugin_name, step)
        section = "step_%s" % step
        tmp_listened_directories = "{{MFDATA_CURRENT_STEP_QUEUE}}"
        if parser.has_option(section, "listened_directories"):
            tmp_listened_directories = parser.get(section,
                                                  "listened_directories")
        tmp_listened_directories = \
            tmp_listened_directories.replace('{{MFDATA_CURRENT_STEP_QUEUE}}',
                                             "step.%s.%s" % (plugin_name,
                                                             step))
        # FIXME: find a better and more general way
        special_value = 'MFDATA_INTERNAL_PLUGINS_SWITCH_DIRECTORIES'
        tmp_listened_directories = \
            tmp_listened_directories.replace('{{%s}}' % special_value,
                                             os.environ[special_value])
        listened_directories = ["{{MFMODULE_RUNTIME_HOME}}/var/in/%s" % x.strip()
                                for x in tmp_listened_directories.split(';')
                                if "/" not in x]
        for i in range(0, len(listened_directories)):
            output.append("")
            if len(listened_directories) == 1:
                output.append("[step_%s_%s:common]" % (plugin_name, step))
            else:
                output.append("[step_%s_%s_%i:common]" % (plugin_name,
                                                          step, i))
            output.append("active=true")
            output.append("directory=%s" % listened_directories[i])
            output.append("queue=step.%s.%s" % (plugin_name, step))
    return "\n".join(output)


directory_observer_ini_file = os.path.join(os.environ['MFMODULE_HOME'], 'config',
                                           'directory_observer.ini')
with open(directory_observer_ini_file, "r") as f:
    content = f.read()

for config_file in glob.glob(MFDATA_PLUGIN_HOME + "/*/config.ini"):
    content = content + make_directory_observer_conf(config_file)

print(envtpl.render_string(content, keep_multi_blank_lines=False))
